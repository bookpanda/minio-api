// Code generated by MockGen. DO NOT EDIT.
// Source: ./metrics/requests.metrics.go

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"

	constants "github.com/bookpanda/minio-api/constants"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockRequestsMetrics is a mock of RequestsMetrics interface.
type MockRequestsMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockRequestsMetricsMockRecorder
}

// MockRequestsMetricsMockRecorder is the mock recorder for MockRequestsMetrics.
type MockRequestsMetricsMockRecorder struct {
	mock *MockRequestsMetrics
}

// NewMockRequestsMetrics creates a new mock instance.
func NewMockRequestsMetrics(ctrl *gomock.Controller) *MockRequestsMetrics {
	mock := &MockRequestsMetrics{ctrl: ctrl}
	mock.recorder = &MockRequestsMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestsMetrics) EXPECT() *MockRequestsMetricsMockRecorder {
	return m.recorder
}

// AddRequest mocks base method.
func (m *MockRequestsMetrics) AddRequest(domain constants.Domain, method constants.Method, statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRequest", domain, method, statusCode)
}

// AddRequest indicates an expected call of AddRequest.
func (mr *MockRequestsMetricsMockRecorder) AddRequest(domain, method, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequest", reflect.TypeOf((*MockRequestsMetrics)(nil).AddRequest), domain, method, statusCode)
}

// GetCounterVec mocks base method.
func (m *MockRequestsMetrics) GetCounterVec() *prometheus.CounterVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterVec")
	ret0, _ := ret[0].(*prometheus.CounterVec)
	return ret0
}

// GetCounterVec indicates an expected call of GetCounterVec.
func (mr *MockRequestsMetricsMockRecorder) GetCounterVec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterVec", reflect.TypeOf((*MockRequestsMetrics)(nil).GetCounterVec))
}
